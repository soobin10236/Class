package Pack;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketOption;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;



public class Client extends Application{

	Socket cs = null;
	TextArea textArea;
	
	//클라이언트 프로그램 동작 메서드
//startClient();
	public void startClient(String IP, int port) {
		//서버 프로그램과 다르게 여러개의 스레드 동시다발적으로 생겨나지 않으므로 단순 스레드 객체 생성
		new Thread() {
			@Override
			public void run() {
				try {
					//소켓 초기화
					cs = new Socket(IP, port);
					//메시지 전달받기 위해 receive 메서드 호출
					receive();
				} catch (Exception e) {
					e.printStackTrace();
					//오류 발생
					if(!cs.isClosed()) {
						//stopClient 호출하여 클라이언트 종료
						stopClient();
						System.out.println("서버 접속에 실패하였습니다.");
						//프로그램 종료
						Platform.exit();
					}
				}
			}	
		}.start();
	}
//startClient();
	
	//클라이언트 종료 메서드
//stopClient();
	public void stopClient() {
		try {
			//소켓이 열린 상태라면
			if(cs != null && !cs.isClosed()) {
				cs.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
//stopClient();
	
	//서버로부터 메시지를 받는 메서드
	//계속 전달받이 위해 무한 루프를 돌려준다.
//receive();
	public void receive() {
		while (true) {
			try {
				//현재 서버로부터 메시지를 전달받을 수 있도록.
				InputStream inputStream = cs.getInputStream();
				//512byte만큼 버퍼에 담아서 계속 전달 받을 것.
				byte[] buffer = new byte[512];
				//read함수로 실제로 입력 받는다.
				int length = inputStream.read(buffer);
				//내용을 입력받는 동안 오류가 발생하면 IOException을 발생시킨다.
				if (length == -1) {throw new IOException();}
				//message에 버퍼에 있는 정보를 담기
				String message = new String(buffer,0,length);
				//화면에 출력
				Platform.runLater(()->{
					//textArea는 GUI 요소 중 하나로써 화면에 출력해주는 요소
					textArea.appendText(message);
				});
			} catch (Exception e) {
				//오류가 발생했을시에는 stopClient 호출 후 break;
				stopClient();
				break;
			}
		}
	}
//receive();
	
	
	@Override
	public void start(Stage arg0) throws Exception {
		
		// System.out.println("실행순서 2");

		// 선두작업
		BorderPane root = new BorderPane(); // 버츄얼 -> 세로로 형성, 호라이즌 -> 가로로 형성
		root.setPadding(new Insets(5));
		
		//BorderPane 위에 하나의 레이아웃을 더 넣어주기 위한 것.
		HBox hbox = new HBox();
		//여백
		hbox.setSpacing(5);
		
		//사용자 이름이 들어갈 수 있는 텍스트 공간
		TextField userName = new TextField();
		userName.setPrefWidth(150); //너비
		userName.setPromptText("닉네임을 입력하세요.");
		
		//HBox 내부에 TextField가 항상 출력 되도록.
		HBox.setHgrow(userName, Priority.ALWAYS);
		
		TextField IPText = new TextField("127.0.0.1");
		TextField portText = new TextField("5001");
		portText.setPrefWidth(80);
		
		//hbox 에 3개의 텍스트박스 추가
		hbox.getChildren().addAll(userName,IPText,portText);
		
		//hbox가 borderPane 상단에 위치
		root.setTop(hbox);
		// ---------------------------------------------
		// 실제 코딩을 작성하면 되는 부분이다.
		// 1.컨트롤을 배치
		Button btn1 = new Button("접속");
		Button btn2 = new Button("Test");
		
		// 2. 컨트롤에 대한 이벤트 처리
		btn1.setOnAction((AE)->{
			try {
				//대화명 입력
				String name = null;
				Scanner scanner = new Scanner(System.in);
				
				while(true) {
					System.out.println("대화명을 입력하세요");
					System.out.print(">>>");
					name = scanner.nextLine();
					//대화명 입력하면 빠져나감.
					if(name.isEmpty() == false) {
						break;
					}
					System.out.println("대화명은 한글자 이상 입력해야 합니다.\n");
				}
				scanner.close();
				
				//통신 소켓
				cs = new Socket();
				
//				cs.connect(new InetSocketAddress("220.119.22.242", 5001));			
				cs.connect(new InetSocketAddress("218.154.207.127", 5001));
				System.out.println("채팅방에 입장하셨습니다.");
				
				PrintWriter pw = new PrintWriter(
						new OutputStreamWriter(
								cs.getOutputStream(), StandardCharsets.UTF_8),true);
				String request = "join:" + name + "\r\n";
				pw.println(request);
//				cs.connect(new InetSocketAddress("localhost", 5001));			
			} catch (Exception e) {
				// TODO: handle exceptio
				e.printStackTrace();
			} 
//			finally{
//	            try{
//	                if( cs != null && !cs.isClosed()){
//	                	cs.close();
//	                }
//	            }
//	            catch(IOException e){
//	                e.printStackTrace();
//	            }
//	        }
		});
		/*
		btn2.setOnAction((AE)->{
			
			try {
				//데이터 보내기 (Client -> OutputStream)
				OutputStream outputStream = cs.getOutputStream();
				String s = "apple : "; //보낼때는 무조건 byte로 보내야함.
				byte[] data = s.getBytes();

				outputStream.write(data);
				System.out.println("data 보냈음.");
			} catch (Exception e2) {
				// TODO: handle exception
			}
		});
		*/
		btn2.setOnAction(new EventHandler<ActionEvent>() {
			int count = 0;
			@Override
			public void handle(ActionEvent arg0) {
				
				try {
					//데이터 보내기 (Client -> OutputStream)
					OutputStream outputStream = cs.getOutputStream();
					String s = "apple : " + count++; //보낼때는 무조건 byte로 보내야함.
					byte[] data = s.getBytes();

					outputStream.write(data);
					System.out.println("data 보냈음.");
				} catch (Exception e2) {
					// TODO: handle exception
				}
				
			}
		});
		
		//root.getChildren().addAll(btn1, btn2);
		// ---------------------------------------------

		// 마무리작업
		Scene scene = new Scene(root);
		arg0.setTitle("Client");// Title 설정
		arg0.setScene(scene); // UI구성 장면을 Scene으로 등록
		arg0.show(); // 등록한 Scene을 보여줌

		// System.out.println("실행순서 3");

	}

	public static void main(String[] args) {
		// System.out.println("실행순서 1");
		launch(); // launcher 에서 블로킹 잡힌다. 런쳐 종료하면 나옴
		// System.out.println("실행순서 4");
		System.out.println("Exit");
	}

}

/*
public class Client {

	public static void main(String[] args) {
		System.out.println("Client Start");
		
		//Client 소켓 생성
		try {
			//통신 소켓
			Socket cs = new Socket();
			//입력을 받고 나서 접속을 해보자
			System.out.println("숫자를 입력하면 접속을 시도합니다.");
			new Scanner(System.in).nextInt(); //블로킹
			//원래는 IP주소 써야하지만 현재는 동일PC이므로 localhost, 필요하면 IP주소 갖다쓰셈
//			cs.connect(new InetSocketAddress("112.162.204.185", 5002));
//			cs.connect(new InetSocketAddress("118.38.27.121", 5001));
			cs.connect(new InetSocketAddress("localhost", 5001));

			System.out.println("숫자를 입력하면 서버에 데이터를 전송합니다.");
			//블로킹
			new Scanner(System.in).nextInt(); //블로킹
			//데이터 보내기 (Client -> OutputStream)
			OutputStream outputStream = cs.getOutputStream();
			String s = "apple"; //보낼때는 무조건 byte로 보내야함.
			byte[] data = s.getBytes();

			outputStream.write(data);
			System.out.println("data 보냈음.");
			
			
		} catch (Exception e) {
			// TODO: handle exceptio
			e.printStackTrace();
		}
		
		new Scanner(System.in).nextInt(); //블로킹
		System.out.println("Client End");
	}
}
*/
